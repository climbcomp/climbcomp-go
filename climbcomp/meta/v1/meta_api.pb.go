// Code generated by protoc-gen-go. DO NOT EDIT.
// source: climbcomp/meta/v1/meta_api.proto

package metav1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetVersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionRequest) Reset()         { *m = GetVersionRequest{} }
func (m *GetVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetVersionRequest) ProtoMessage()    {}
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ac783906778a5a5, []int{0}
}

func (m *GetVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionRequest.Unmarshal(m, b)
}
func (m *GetVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionRequest.Marshal(b, m, deterministic)
}
func (m *GetVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionRequest.Merge(m, src)
}
func (m *GetVersionRequest) XXX_Size() int {
	return xxx_messageInfo_GetVersionRequest.Size(m)
}
func (m *GetVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionRequest proto.InternalMessageInfo

type GetVersionResponse struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionResponse) Reset()         { *m = GetVersionResponse{} }
func (m *GetVersionResponse) String() string { return proto.CompactTextString(m) }
func (*GetVersionResponse) ProtoMessage()    {}
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ac783906778a5a5, []int{1}
}

func (m *GetVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionResponse.Unmarshal(m, b)
}
func (m *GetVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionResponse.Marshal(b, m, deterministic)
}
func (m *GetVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionResponse.Merge(m, src)
}
func (m *GetVersionResponse) XXX_Size() int {
	return xxx_messageInfo_GetVersionResponse.Size(m)
}
func (m *GetVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionResponse proto.InternalMessageInfo

func (m *GetVersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*GetVersionRequest)(nil), "climbcomp.meta.v1.GetVersionRequest")
	proto.RegisterType((*GetVersionResponse)(nil), "climbcomp.meta.v1.GetVersionResponse")
}

func init() { proto.RegisterFile("climbcomp/meta/v1/meta_api.proto", fileDescriptor_2ac783906778a5a5) }

var fileDescriptor_2ac783906778a5a5 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xce, 0xc9, 0xcc,
	0x4d, 0x4a, 0xce, 0xcf, 0x2d, 0xd0, 0xcf, 0x4d, 0x2d, 0x49, 0xd4, 0x2f, 0x33, 0x04, 0xd3, 0xf1,
	0x89, 0x05, 0x99, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x82, 0x70, 0x15, 0x7a, 0x20, 0x19,
	0xbd, 0x32, 0x43, 0x25, 0x61, 0x2e, 0x41, 0xf7, 0xd4, 0x92, 0xb0, 0xd4, 0xa2, 0xe2, 0xcc, 0xfc,
	0xbc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x3d, 0x2e, 0x21, 0x64, 0xc1, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0x32, 0x88, 0x90, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x67, 0x10, 0x8c, 0x6b, 0x94, 0xc2, 0xc5, 0xee, 0x9b, 0x5a, 0x92, 0xe8, 0x18, 0xe0, 0x29, 0x14,
	0xc9, 0xc5, 0x85, 0xd0, 0x2a, 0xa4, 0xa2, 0x87, 0x61, 0xa3, 0x1e, 0x86, 0x75, 0x52, 0xaa, 0x04,
	0x54, 0x41, 0xec, 0x77, 0x8a, 0xe5, 0x12, 0x4d, 0xce, 0xcf, 0xc5, 0x54, 0xeb, 0xc4, 0x03, 0xb6,
	0xbc, 0x20, 0x33, 0x00, 0xe4, 0xc9, 0x00, 0xc6, 0x28, 0x36, 0x90, 0x44, 0x99, 0xe1, 0x22, 0x26,
	0x66, 0x67, 0xdf, 0x88, 0x55, 0x4c, 0x82, 0xce, 0x70, 0x1d, 0x20, 0x85, 0x7a, 0x61, 0x86, 0xa7,
	0x90, 0xc4, 0x62, 0x40, 0x62, 0x31, 0x61, 0x86, 0x49, 0x6c, 0xe0, 0x30, 0x32, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0xb7, 0x8a, 0xe1, 0x47, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetaAPIClient is the client API for MetaAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetaAPIClient interface {
	// Returns the current API version.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type metaAPIClient struct {
	cc *grpc.ClientConn
}

func NewMetaAPIClient(cc *grpc.ClientConn) MetaAPIClient {
	return &metaAPIClient{cc}
}

func (c *metaAPIClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/climbcomp.meta.v1.MetaAPI/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaAPIServer is the server API for MetaAPI service.
type MetaAPIServer interface {
	// Returns the current API version.
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
}

func RegisterMetaAPIServer(s *grpc.Server, srv MetaAPIServer) {
	s.RegisterService(&_MetaAPI_serviceDesc, srv)
}

func _MetaAPI_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaAPIServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/climbcomp.meta.v1.MetaAPI/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaAPIServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetaAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "climbcomp.meta.v1.MetaAPI",
	HandlerType: (*MetaAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _MetaAPI_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "climbcomp/meta/v1/meta_api.proto",
}
